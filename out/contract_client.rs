// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct ContractFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> ContractFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::ContractFactory for ContractFactory<R> {
    type Args = R::Args;
    fn new(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, contract_factory::io::New>::new(self.remoting.clone(), ())
    }
}

pub mod contract_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <New as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ();
            type Reply = ();
        }
    }
}
pub struct TrafficLight<R> {
    remoting: R,
}
impl<R> TrafficLight<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::TrafficLight for TrafficLight<R> {
    type Args = R::Args;
    fn green(&mut self) -> impl Call<Output = ContractResponse, Args = R::Args> {
        RemotingAction::<_, traffic_light::io::Green>::new(self.remoting.clone(), ())
    }
    fn red(&mut self) -> impl Call<Output = ContractResponse, Args = R::Args> {
        RemotingAction::<_, traffic_light::io::Red>::new(self.remoting.clone(), ())
    }
    fn yellow(&mut self) -> impl Call<Output = ContractResponse, Args = R::Args> {
        RemotingAction::<_, traffic_light::io::Yellow>::new(self.remoting.clone(), ())
    }
    fn contract_owner(&self) -> impl Query<Output = ActorId, Args = R::Args> {
        RemotingAction::<_, traffic_light::io::ContractOwner>::new(self.remoting.clone(), ())
    }
    fn traffic_light(&self) -> impl Query<Output = IoContractState, Args = R::Args> {
        RemotingAction::<_, traffic_light::io::TrafficLight>::new(self.remoting.clone(), ())
    }
}

pub mod traffic_light {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct Green(());
        impl Green {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <Green as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for Green {
            const ROUTE: &'static [u8] = &[
                48, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 20, 71, 114, 101, 101,
                110,
            ];
            type Params = ();
            type Reply = super::ContractResponse;
        }
        pub struct Red(());
        impl Red {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <Red as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for Red {
            const ROUTE: &'static [u8] = &[
                48, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 12, 82, 101, 100,
            ];
            type Params = ();
            type Reply = super::ContractResponse;
        }
        pub struct Yellow(());
        impl Yellow {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <Yellow as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for Yellow {
            const ROUTE: &'static [u8] = &[
                48, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 24, 89, 101, 108, 108,
                111, 119,
            ];
            type Params = ();
            type Reply = super::ContractResponse;
        }
        pub struct ContractOwner(());
        impl ContractOwner {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <ContractOwner as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for ContractOwner {
            const ROUTE: &'static [u8] = &[
                48, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 52, 67, 111, 110, 116,
                114, 97, 99, 116, 79, 119, 110, 101, 114,
            ];
            type Params = ();
            type Reply = ActorId;
        }
        pub struct TrafficLight(());
        impl TrafficLight {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <TrafficLight as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for TrafficLight {
            const ROUTE: &'static [u8] = &[
                48, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 48, 84, 114, 97, 102,
                102, 105, 99, 76, 105, 103, 104, 116,
            ];
            type Params = ();
            type Reply = super::IoContractState;
        }
    }
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum ContractResponse {
    GreenReceived,
    YellowReceived,
    RedReceived,
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct IoContractState {
    pub owner: ActorId,
    pub current_light: Light,
    pub callers: Vec<(ActorId, Light)>,
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum Light {
    Green,
    Red,
    Yellow,
}

pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait ContractFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait TrafficLight {
        type Args;
        fn green(&mut self) -> impl Call<Output = ContractResponse, Args = Self::Args>;
        fn red(&mut self) -> impl Call<Output = ContractResponse, Args = Self::Args>;
        fn yellow(&mut self) -> impl Call<Output = ContractResponse, Args = Self::Args>;
        fn contract_owner(&self) -> impl Query<Output = ActorId, Args = Self::Args>;
        fn traffic_light(&self) -> impl Query<Output = IoContractState, Args = Self::Args>;
    }
}

#[cfg(feature = "mocks")]
#[cfg(not(target_arch = "wasm32"))]
extern crate std;

#[cfg(feature = "mocks")]
#[cfg(not(target_arch = "wasm32"))]
pub mod mockall {
    use super::*;
    use sails_rs::mockall::*;
    mock! { pub TrafficLight<A> {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl<A> traits::TrafficLight for TrafficLight<A> { type Args = A; fn green (&mut self, ) -> MockCall<A, ContractResponse>;fn red (&mut self, ) -> MockCall<A, ContractResponse>;fn yellow (&mut self, ) -> MockCall<A, ContractResponse>;fn contract_owner (& self, ) -> MockQuery<A, ActorId>;fn traffic_light (& self, ) -> MockQuery<A, IoContractState>; } }
}
